//
//  MMMoviePlayer.m
//  YouXiangWeiShang
//
//  Created by yofoto on 15/1/19.
//  Copyright (c) 2014年 http://boke.yofoto.cn All rights reserved.
//

#import "MMMoviePlayerView.h"
#import "NSTimer+BlockSupport.h"

#define MMPlayerViewHeight  [[UIScreen mainScreen] bounds].size.height
#define MMPlayerViewWidth  [[UIScreen mainScreen] bounds].size.width

@interface MMMoviePlayerView ()
{
    BOOL isDisappear;//操控条是否已经消失
    BOOL isTimeSliderTouchDown;//用于判断timeSlider是否在滑动，(避免滑动的时候收当前播放时间的变化而出现timeSlider闪动）
    NSTimer *playTimer;
}

@property (strong, nonatomic) MPMoviePlayerController *player;
@property (strong, nonatomic) UIImageView *playerBgImgView;
@property (strong, nonatomic) UIImageView *operateBgView;
@property (strong, nonatomic) UIButton *playOrPauseBtn;
@property (strong, nonatomic) UIButton *fullScreenBtn;
@property (strong, nonatomic) UISlider *timeSlider;
@property (strong, nonatomic) UIButton *backBtn;
@property (strong, nonatomic) UILabel *timeLabel;
@property (strong, nonatomic) UIActivityIndicatorView *loadingView;
@property (strong, nonatomic) UIView *markView;//加一层蒙版view，为了给播放器添加单击双击事件

@property (assign) CGRect smallViewFrame;
@property (assign) CGRect fullScreenFrame;
@end

@implementation MMMoviePlayerView

- (void) dealloc
{
    [self mmPlayerStop];
    self.m_delegate = nil;
    _playerBgImgView = nil;
    _mmPlayUrl = nil;
    _player = nil;
    _fullScreenBtn = nil;
    _playOrPauseBtn = nil;
    _timeSlider = nil;
    _operateBgView = nil;
    _timeLabel = nil;
    _backBtn = nil;
    _loadingView = nil;
    _markView = nil;
    _mySuperView = nil;

    [NSObject cancelPreviousPerformRequestsWithTarget:self];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (id) initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self)
    {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(msg_didBecomeActiveNotification:) name:UIApplicationDidBecomeActiveNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(msg_didEnterBackgroundNotification:) name:UIApplicationDidEnterBackgroundNotification object:nil];
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(msg_willResignActiveNotification:) name:UIApplicationWillResignActiveNotification object:nil];
        //注册回调影片已经播放结束
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(msg_moviePlayBackDidFinish:)
                                                     name:MPMoviePlayerPlaybackDidFinishNotification
                                                   object:nil];
        //播放状态改变的通知
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(msg_moviePlayerPlaybackStateDidChange:)
                                                     name:MPMoviePlayerPlaybackStateDidChangeNotification
                                                   object:nil];
        
        //播放状态改变的通知
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(msg_moviePlayerLoadStateDidChange:)
                                                     name:MPMoviePlayerLoadStateDidChangeNotification
                                                   object:nil];
        
        self.clipsToBounds = YES;
        
        self.playerBgImgView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
        self.playerBgImgView.image = [UIImage imageNamed:@"player_operateBg"];
        [self addSubview:self.playerBgImgView];
        //播放界面
        self.player = [[MPMoviePlayerController alloc] init];
        [self.player.view setFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
        self.player.scalingMode = MPMovieScalingModeNone;
        self.player.controlStyle = MPMovieControlStyleNone;
        self.player.shouldAutoplay = YES;//网络请求慢时，视频会暂停，此状态开启才能保证视频自动播放
        self.player.movieSourceType = MPMovieSourceTypeFile;
        [self addSubview:self.player.view];
        
        //用于添加手势
        self.markView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
        self.markView.backgroundColor = [UIColor clearColor];
        [self addSubview:self.markView];
        
        self.loadingView = [[UIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhite];
        self.loadingView.frame = CGRectMake(0, 0, self.markView.frame.size.width,self.markView.frame.size.height);
        self.loadingView.backgroundColor = [UIColor clearColor];
        [self.loadingView startAnimating];
        [self.markView addSubview:self.loadingView];
        
        //添加单击双击事件
        UITapGestureRecognizer *singleTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(singleTap)];
        singleTapGesture.numberOfTapsRequired = 1;
        [self.markView addGestureRecognizer:singleTapGesture];
        
        UITapGestureRecognizer *doubleTapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(doubleTap)];
        doubleTapGesture.numberOfTapsRequired = 2;
        [self.markView addGestureRecognizer:doubleTapGesture];
        
        //底部操作区的背景
        self.operateBgView = [[UIImageView alloc] initWithFrame:CGRectMake(0, frame.size.height - 40, frame.size.width, 40)];
        self.operateBgView.alpha = 0.95;
        self.operateBgView.userInteractionEnabled = YES;
        self.operateBgView.backgroundColor = [UIColor clearColor];
        self.operateBgView.image = [UIImage imageNamed:@"player_operateBg"];
        [self addSubview:self.operateBgView];
        
        
        //返回按钮
        self.backBtn = [MMFontButton buttonWithType:UIButtonTypeCustom];
        [self.backBtn setImage:[UIImage imageNamed:@"back_white"] forState:UIControlStateNormal];
//        [self.backBtn setBackgroundImage:[UIImage imageNamed:@"player_operateBg"] forState:UIControlStateNormal];
        self.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:0.95];
        self.backBtn.contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
        self.backBtn.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
        self.backBtn.frame = CGRectMake(-30, 0, frame.size.width + 25, 40);
        [self.backBtn addTarget:self action:@selector(backBtnTapped) forControlEvents:UIControlEventTouchUpInside];
        self.backBtn.alpha = 1.0f;
        self.backBtn.imageEdgeInsets = UIEdgeInsetsMake(0, 12, 0, 0);
        self.backBtn.titleEdgeInsets = UIEdgeInsetsMake(3, 25, 0, 0);
//        [self.backBtn setTitle:@"测试标题" forState:UIControlStateNormal];
        [self addSubview:self.backBtn];
        
        //暂停播放按钮
        self.playOrPauseBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        self.playOrPauseBtn.backgroundColor = [UIColor clearColor];
        [self.playOrPauseBtn setImage:[UIImage imageNamed:@"player_pause"] forState:UIControlStateNormal];
        [self.playOrPauseBtn addTarget:self action:@selector(playOrPauseBtnTapped) forControlEvents:UIControlEventTouchUpInside];
        self.playOrPauseBtn.frame = CGRectMake(0, 0, 40, 40);
        [self.operateBgView addSubview:self.playOrPauseBtn];
        
        //全屏按钮
        self.fullScreenBtn = [UIButton buttonWithType:UIButtonTypeCustom];
        self.fullScreenBtn.backgroundColor = [UIColor clearColor];
        [self.fullScreenBtn setImage:[UIImage imageNamed:@"player_resize_fullScreen"] forState:UIControlStateNormal];
        [self.fullScreenBtn addTarget:self action:@selector(fullScreenBtnTapped) forControlEvents:UIControlEventTouchUpInside];
        self.fullScreenBtn.frame = CGRectMake(self.operateBgView.frame.size.width - 40, 0, 40, 40);
        [self.operateBgView addSubview:self.fullScreenBtn];
        
        //播放进度
        self.timeSlider = [[UISlider alloc] initWithFrame:CGRectMake(38, 0, self.operateBgView.frame.size.width - 150, 40)];
        self.timeSlider.backgroundColor = [UIColor clearColor];
        [self.timeSlider setThumbImage:[UIImage imageNamed:@"player_jindu"] forState:UIControlStateNormal];
        [self.timeSlider setMinimumTrackImage:[UIImage imageNamed:@"player_slider_blue"] forState:UIControlStateNormal];
        [self.timeSlider setMaximumTrackImage:[UIImage imageNamed:@"player_slider_white"] forState:UIControlStateNormal];
        [self.timeSlider addTarget:self action:@selector(timeSliderValueChanged) forControlEvents:UIControlEventValueChanged];
        [self.timeSlider addTarget:self action:@selector(timeSliderTouchDown) forControlEvents:UIControlEventTouchDown];
        [self.timeSlider addTarget:self action:@selector(timeSliderTouchUp) forControlEvents:UIControlEventTouchUpInside];
        self.timeSlider.continuous = YES ;
        [self.operateBgView addSubview:self.timeSlider];
        
        //播放时间
        self.timeLabel = [[UILabel alloc] initWithFrame:CGRectMake(43 + self.timeSlider.frame.size.width, 0, self.operateBgView.frame.size.width - (40 + self.timeSlider.frame.size.width) - 40, 40)];
        self.timeLabel.backgroundColor = [UIColor clearColor];
        self.timeLabel.font = [UIFont systemFontOfSize:12.0];
        self.timeLabel.textAlignment = NSTextAlignmentCenter;
        self.timeLabel.textColor = [UIColor whiteColor];
        self.timeLabel.text = @"--:--/--:--";
        [self.operateBgView addSubview:self.timeLabel];
        
        self.smallViewFrame = frame;
    }
    
    return self;
}

#pragma mark- frame改变时，里面相应的子viewframe随之改变
- (void) setFrame:(CGRect)frame
{
    self.bounds = CGRectMake(0, 0, frame.size.width, frame.size.height);
    self.center = CGPointMake(frame.origin.x + frame.size.width/2.0, frame.origin.y + frame.size.height/2.0);
    [self.playerBgImgView setFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
    [self.player.view setFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
    [self.markView setFrame:CGRectMake(0, 0, frame.size.width, frame.size.height)];
    [self.loadingView setFrame:CGRectMake(0, 0, frame.size.width,frame.size.height)];
    [self.operateBgView setFrame:CGRectMake(0, frame.size.height - 40, frame.size.width, 40)];
    [self.fullScreenBtn setFrame:CGRectMake(self.operateBgView.frame.size.width - 40, 0, 40, 40)];
    [self.timeSlider setFrame:CGRectMake(35, 0, self.operateBgView.frame.size.width - 150, 40)];
    [self.timeLabel setFrame:CGRectMake(43 + self.timeSlider.frame.size.width, 0, self.operateBgView.frame.size.width - (40 + self.timeSlider.frame.size.width) - 40, 40)];
    if (_isFullScreen)
    {
        [self.backBtn setFrame:CGRectMake(0, 0, frame.size.width, 40)];
    }
    else
    {
        [self.backBtn setFrame:CGRectMake(-30, 0, frame.size.width + 25, 40)];
    }
}

#pragma mark- 设置视频地址
- (void) setMmPlayUrl:(NSString *)mmPlayUrl
{
    _mmPlayUrl = nil;
    _mmPlayUrl = mmPlayUrl;
    self.player.contentURL = [NSURL URLWithString:mmPlayUrl];
}

#pragma mark- 设置视频标题
- (void) setMmPlayTitle:(NSString *)mmPlayTitle
{
    if (mmPlayTitle && mmPlayTitle.length > 0 && ![mmPlayTitle isEqualToString:@"null"] && ![mmPlayTitle isEqualToString:@"(null)"] && ![mmPlayTitle isEqualToString:@"<null>"]) {
        [self.backBtn setTitle:mmPlayTitle forState:UIControlStateNormal];
    }
}

#pragma mark- 当前播放的状态
- (MPMoviePlaybackState ) mmMoviePlaybackState
{
    return self.player.playbackState;
}

#pragma mark- =====  手动控制视频播放，准备，开始，暂停，停止  =====
#pragma mark- 准备播放
- (void) mmPlayerReadyPlay
{
    [self.player prepareToPlay];
}

#pragma mark- 开始播放
- (void) mmPlayerPlay
{

    [self.playOrPauseBtn setImage:[UIImage imageNamed:@"player_pause"] forState:UIControlStateNormal];
    [self.player play];
    
    if (playTimer) {
        [playTimer invalidate];
    }
    __weak MMMoviePlayerView *weakSelf = self;
    playTimer = [NSTimer scheduledTimerWithTimeInterval:1 block:^{
        [weakSelf updateDisplayPlayTime];
    } repeats:YES];

}

#pragma mark- 暂停播放
- (void) mmPlayerPause
{
    [self.playOrPauseBtn setImage:[UIImage imageNamed:@"player_play"] forState:UIControlStateNormal];
    [self.player pause];
    self.loadingView.hidden = YES;
    [self.loadingView stopAnimating];
}

#pragma mark- 停止播放
- (void) mmPlayerStop
{
    [self.player pause];
    [self.player stop];
}

#pragma mark- 暂停播放按钮点击
- (void) playOrPauseBtnTapped
{
    if (self.player.playbackState == MPMoviePlaybackStatePlaying|self.player.playbackState == MPMoviePlaybackStateSeekingForward|self.player.playbackState == MPMoviePlaybackStateSeekingBackward)
    {
        [self mmPlayerPause];
    }
    else
    {
        [self mmPlayerPlay];
    }
}

#pragma mark- =====  视频屏幕尺寸控制，全屏，小屏  =====
#pragma mark- 全屏按钮点击

- (void) fullScreenBtnTapped
{
    if (_isFullScreen)
    {
        //退出全屏
        _isFullScreen = NO;

        if (_m_delegate && [_m_delegate respondsToSelector:@selector(mmPlayerBackFullScreenTapped)])
        {
            [self.m_delegate mmPlayerBackFullScreenTapped];
        }
        
        //退出全屏时动画
        [UIView animateWithDuration:0.35f animations:^{
            self.transform = CGAffineTransformMakeRotation(0);
            self.frame = self.smallViewFrame;
//            self.backBtn.alpha = 0.0f;
            [self.fullScreenBtn setImage:[UIImage imageNamed:@"player_resize_fullScreen"] forState:UIControlStateNormal];
            
        } completion:^(BOOL finished) {
            CGRect convertRect = [self.window convertRect:self.smallViewFrame toView:self.mySuperView];
            self.frame = convertRect;
            [self.mySuperView addSubview:self];
        }];
        
    }
    else
    {
        CGRect convertRect = [self.mySuperView convertRect:self.frame toView:self.window];
        self.smallViewFrame = convertRect;
        self.frame = convertRect;
        [self.window addSubview:self];
        
        //进入全屏
        _isFullScreen = YES;

        if (_m_delegate && [_m_delegate respondsToSelector:@selector(mmPlayerFullScreenTapped)])
        {
            [self.m_delegate mmPlayerFullScreenTapped];
        }

        //全屏时动画
        [UIView animateWithDuration:0.35f animations:^{
            [self.fullScreenBtn setImage:[UIImage imageNamed:@"player_resize_smallScreen"] forState:UIControlStateNormal];
//            self.backBtn.alpha = 1.0f;
            self.transform = CGAffineTransformMakeRotation(M_PI/2);
//            self.frame = CGRectMake(-124*(ViewWidth/320.0f) - 1 - (IOS7AFTER ? 0 : 10), 125*(ViewWidth/320.0f) - 2, ViewHeight + 2 , ViewWidth + 2 + (IOS7AFTER ? 0 : 10));
            self.frame = CGRectMake(self.window.center.x - MMPlayerViewHeight/2, self.window.center.y - MMPlayerViewWidth/2,MMPlayerViewHeight, MMPlayerViewWidth);
        }];
    }
    
}

#pragma mark- 返回按钮点击
- (void) backBtnTapped
{
    if (_isFullScreen)
    {
        [self fullScreenBtnTapped];
    }
    else
    {
        if (_m_delegate && [_m_delegate respondsToSelector:@selector(mmPlayerExitTapped)]) {
            [self.m_delegate mmPlayerExitTapped];
        }
    }
}

#pragma mark- =====   视频播放状态更新通知   =====
#pragma mark- 播放结束的回调通知
- (void) msg_moviePlayBackDidFinish:(NSNotification*)notify
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
    if (_isFullScreen)
    {
        //退出全屏
        _isFullScreen = NO;
        //退出全屏时动画
        [UIView animateWithDuration:0.35f animations:^{
            self.transform = CGAffineTransformMakeRotation(0);
            self.frame = self.smallViewFrame;
            self.backBtn.alpha = 0.0f;
            
        } completion:^(BOOL finished) {
            
            CGRect convertRect = [self.window convertRect:self.smallViewFrame toView:self.mySuperView];
            self.frame = convertRect;
            [self.mySuperView addSubview:self];
            
            [UIView animateWithDuration:0.2f animations:^{
                self.alpha = 0.0f;
            } completion:^(BOOL finished) {
                [self.player stop];
                [self removeFromSuperview];
            }];
            
        }];
        
        if (_m_delegate && [_m_delegate respondsToSelector:@selector(mmPlayerBackFullScreenTapped)])
        {
            [self.m_delegate mmPlayerBackFullScreenTapped];
        }
    }
    else
    {
        [UIView animateWithDuration:0.2f animations:^{
            self.alpha = 0.0f;
        } completion:^(BOOL finished) {
            [self.player stop];
            [self removeFromSuperview];
        }];
    }
}

//重新设置播放按钮和进度条状态
- (void)resetPlayerState
{
    self.timeSlider.value = 0.0;
    self.player.currentPlaybackTime = 0;
    [self.player stop];
}

- (void) msg_moviePlayerLoadStateDidChange:(NSNotification *)notify
{
    //    if (self.player.loadState != MPMovieLoadStatePlaythroughOK) {
    //        [self.player play];
    //    }
    //    NSLog(@"------self.player.loadState---->%lu",self.player.loadState);
}

//播放状态改变
- (void) msg_moviePlayerPlaybackStateDidChange:(NSNotification*)notify
{
    if (!isTimeSliderTouchDown)
    {
        if (self.player.playbackState == MPMoviePlaybackStatePlaying)
        {
            [self.playOrPauseBtn setImage:[UIImage imageNamed:@"player_pause"] forState:UIControlStateNormal];
        }
        else
        {
            [self.playOrPauseBtn setImage:[UIImage imageNamed:@"player_play"] forState:UIControlStateNormal];
            
            [self.loadingView startAnimating];
            self.loadingView.hidden = NO;
        }
    }
}

//应用进入后台
- (void) msg_didBecomeActiveNotification:(NSNotification *)notify
{
    [self mmPlayerPlay];
}

//应用进入后台
- (void) msg_didEnterBackgroundNotification:(NSNotification *)notify
{
    [self mmPlayerPause];
}

//应用进入后台
- (void) msg_willResignActiveNotification:(NSNotification *)notify
{
    [self mmPlayerPause];
}
#pragma mark- =====  单双击事件处理  =====
#pragma mark- 单击让状态/操控条消失或隐藏

-(void)singleTap
{
    if (!isDisappear)
    {
        [UIView animateWithDuration:0.3f animations:^{
            self.backBtn.alpha = 0.0f;
            self.operateBgView.alpha = 0.0f;
        }];
    }
    else
    {
        [UIView animateWithDuration:0.3f animations:^{
//            if (_isFullScreen)
//            {
                self.backBtn.alpha = 1.0f;
//            }
            self.operateBgView.alpha = 0.95f;
        }];
    }
    isDisappear = !isDisappear;
}

#pragma mark- 双击进入/退出全屏
-(void)doubleTap
{
    [self fullScreenBtnTapped];
}

#pragma mark- 播放进度控制
- (void) timeSliderValueChanged
{
    if (self.player.currentPlaybackTime > 0)
    {
        float currentLength = self.player.duration * self.timeSlider.value;
        
        self.player.currentPlaybackTime = currentLength;
        self.timeSlider.value = currentLength/self.player.duration;
    }
}

#pragma mark- 按下timeSlider
- (void) timeSliderTouchDown
{
    isTimeSliderTouchDown = YES;
}

- (void) timeSliderTouchUp
{
    [self performSelector:@selector(delaySetTimeSliderTouchUp) withObject:nil afterDelay:0.7];
}

- (void)delaySetTimeSliderTouchUp
{
    isTimeSliderTouchDown = NO;
}

#pragma mark- 是否更新播放时间
- (void) updatePlayTime:(BOOL)update
{
    if (update)
    {
        if (playTimer) {
            [playTimer invalidate];
        }
        __weak MMMoviePlayerView *weakSelf = self;
        playTimer = [NSTimer scheduledTimerWithTimeInterval:1 block:^{
            [weakSelf updateDisplayPlayTime];
        } repeats:YES];
    }
    else
    {
        [playTimer invalidate];
        playTimer = nil;
    }
}

/**
 *  播放器清理并移除
 */
- (void) mmPlayerClear
{
    [self mmPlayerStop];
    self.m_delegate = nil;
    [self removeFromSuperview];
}

#pragma mark- 显示的播放时间更新
- (void) updateDisplayPlayTime
{
    NSTimeInterval interval = [self.player currentPlaybackTime];
    NSString *currentTime = [self getTime:interval];
    
    NSTimeInterval totalInterval = [self.player duration];
    NSString *totalTime = [self getTime:totalInterval];
    
    if (!isTimeSliderTouchDown)
    {
        self.timeSlider.value = interval/self.player.duration;
        
        NSString *displayTime = [NSString stringWithFormat:@"%@/%@",currentTime,totalTime];
        if (displayTime.length > 0)
        {
            [self.timeLabel setAttributedText:[self attributeStringWithcContent:displayTime]];
        }
        
        if (self.player.playbackState == MPMoviePlaybackStatePlaying | self.player.playbackState == MPMoviePlaybackStateSeekingForward | self.player.playbackState == MPMoviePlaybackStateSeekingBackward)
        {
            [self.playOrPauseBtn setImage:[UIImage imageNamed:@"player_pause"] forState:UIControlStateNormal];
            self.loadingView.hidden = YES;
            [self.loadingView stopAnimating];
        }
        else
        {
            [self.playOrPauseBtn setImage:[UIImage imageNamed:@"player_play"] forState:UIControlStateNormal];
            
            if (self.player.playbackState != MPMoviePlaybackStatePaused)
            {
                [self.loadingView startAnimating];
                self.loadingView.hidden = NO;
            }
        }
    }
    
    //    [self getMovieCache];
}

//转换播放时长为00:00样式
- (NSString *)getTime:(NSTimeInterval) interval
{
    NSString *tmpStr = [NSString stringWithFormat:@"%f",interval];

    if (tmpStr.floatValue <= 0)
    {
        interval = 0;
    }
    //计算分秒时
    int hour = interval/3600;
    
    int min = interval/60 - hour*60;
    
    int sec = interval - min*60 - hour*3600;
    
    NSString *secStr;
    
    if (sec > 9)
    {
        secStr = [NSString stringWithFormat:@"%d",sec];
    }
    else
    {
        secStr = [NSString stringWithFormat:@"0%d",sec];
    }
    
    NSString *minStr;
    
    if(min > 9)
    {
        minStr = [NSString stringWithFormat: @"%d",min];
    }
    else
    {
        minStr = [NSString stringWithFormat: @"0%d",min];
    }
    
    NSString *hourStr;
    
    if (hour > 9)
    {
        hourStr = [NSString stringWithFormat: @"%d",hour];
    }
    else
    {
        hourStr = [NSString stringWithFormat: @"0%d",hour];
    }
    
    NSString *txtTime = [[NSString alloc] init];
    txtTime = [NSString stringWithFormat:@"%@:%@",minStr,secStr];
    
    return txtTime;
}

//改变时间显示区域当前播放时长和总时长的字体颜色
- (NSMutableAttributedString *)attributeStringWithcContent:(NSString *)content
{
    NSRange oneRange = NSMakeRange(0, 5);
    NSRange twoRange = NSMakeRange(5, 6);
    NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:content];
    
    [attributedStr addAttribute:NSFontAttributeName value:[UIFont boldSystemFontOfSize:12] range:NSMakeRange(0, 10)];
    [attributedStr addAttribute:NSForegroundColorAttributeName value:[UIColor colorWithRed:255/255.0 green:255/255.0 blue:255/255.0 alpha:1] range:oneRange];
    [attributedStr addAttribute:NSForegroundColorAttributeName value:[UIColor colorWithRed:110/255.0 green:110/255.0 blue:110/255.0 alpha:1.0] range:twoRange];
    
    return attributedStr;
}

//获取视频缓存进度
- (void) getMovieCache
{
    NSArray *events = self.player.accessLog.events;
    NSInteger count = events.count;
    
    for (int i = 0; i < count; i++)
    {
        MPMovieAccessLogEvent *currentEvent = [events objectAtIndex:i];
        
        //位
        //        double byts = currentEvent.indicatedBitrate;
        //字节
        //        int64_t byte = currentEvent.numberOfBytesTransferred;
        
        //转换为kb
        int64_t bytes = currentEvent.numberOfBytesTransferred >> 10;
        NSMutableString *strBytes = [[NSMutableString alloc] initWithCapacity:100];
        [strBytes appendFormat:@"总共的Size = %lld byte", bytes];
        
        NSLog(@"%@",strBytes);
        if (bytes > 1024)
        {
            //转换为兆
            bytes = bytes >> 10;
        }
    }
}

#pragma mark - =====  播放器从屏幕上移除后的处理，同屏幕滑动不会调用，只有切换到别的view才会调用  =====

- (void)didMoveToWindow {
    if (self.window) {
        // Added to a window, similar to -viewDidLoad.
        // Subscribe to notifications here.
    }
    else {
        if (_m_delegate && [_m_delegate respondsToSelector:@selector(mmplayerRemoveFormWindow)])
        {
            [self.m_delegate mmplayerRemoveFormWindow];
        }
        if ([self isClearWhenRemoveFromWindow]) {
            [self mmPlayerClear];
        }
    }
}

@end
