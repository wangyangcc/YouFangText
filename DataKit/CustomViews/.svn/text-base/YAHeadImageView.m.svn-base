//
//  YAHeadImageView.m
//  YouAsk
//
//  Created by wangyangyang on 15/6/1.
//  Copyright (c) 2015年 wang yangyang. All rights reserved.
//

#import "YAHeadImageView.h"
#import "UIViewController+Route.h"
#import "MMAppDelegateHelper.h"
#import "SDWebImageManager.h"
#import "UIImageView+MMSDWebImageView.h"

@interface YAHeadImageView ()
{
    UIImageView *shadeImageView;
    UIImageView *headImageView;
    
    UIImageView *verifiedTypeImageView;
    NSArray *verifiedTypeDimensionsSizeConstraint;
    
    NSString *imagePathTmp;
}

@end

@implementation YAHeadImageView

- (instancetype)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        [self myInit];
    }
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    if (self) {
        [self myInit];
    }
    return self;
}

- (void)myInit
{
    headImageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 1, 1)];
    [self addSubview:headImageView];
    [headImageView autoPinEdgesToSuperviewEdgesWithInsets:UIEdgeInsetsZero];
    
    shadeImageView = [[UIImageView alloc] initWithFrame:CGRectZero];
    [self addSubview:shadeImageView];
    [shadeImageView autoPinEdgesToSuperviewEdgesWithInsets:UIEdgeInsetsZero];
    
    verifiedTypeImageView = [[UIImageView alloc] initWithFrame:CGRectZero];
    verifiedTypeImageView.hidden = YES;
    [self addSubview:verifiedTypeImageView];
    verifiedTypeDimensionsSizeConstraint = [verifiedTypeImageView autoSetDimensionsToSize:CGSizeMake(15, 15)];
    [verifiedTypeImageView autoPinEdgeToSuperviewEdge:ALEdgeTrailing];
    [verifiedTypeImageView autoPinEdgeToSuperviewEdge:ALEdgeBottom];
    
    UITapGestureRecognizer *tapGe = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(taped)];
    [self addGestureRecognizer:tapGe];
}

#pragma mark - Public Method

/**
 *  刷新内容
 *
 *  @param imagePath    头像地址
 *  @param userId       用户id
 *  @param verifiedType 身份标示
 */
- (void)updateWithImagePath:(NSString *)imagePath
                     userId:(NSNumber *)userId
               verifiedType:(NSString *)verifiedType
{
    self.userId = userId;
    
    if (self.hideVerifiedView == NO && verifiedType && [verifiedType integerValue] == 1) {
        verifiedTypeImageView.hidden = NO;
    }
    else {
        verifiedTypeImageView.hidden = YES;
    }
    imagePathTmp = [imagePath copy];
    [headImageView setImageWithURL:[NSURL URLWithString:imagePathTmp] placeholderImage:[UIImage imageNamed:PlaceHolderImgHeader]];
}

/**
 *  刷新头像
 *
 *  @param image 头像image
 */
- (void)updateWithImage:(UIImage *)image
{
    headImageView.image = image;
}

/**
 *  用户头像点击
 */
- (void)userPhotoTaped
{
    [self taped];
}

/**
 *  重新加载头像
 */
- (void)reloadHeadImage
{
    headImageView.image = [UIImage imageNamed:PlaceHolderImgHeader];
   // [headImageView setBackgroundColor:[UIColor colorWithPatternImage:[UIImage imageNamed:PlaceHolderImgHeader]]];
//    [headImageView sd_setImageWithURL:[NSURL URLWithString:imagePathTmp] placeholderImage:[UIImage imageNamed:PlaceHolderImgHeader] options:SDWebImageHighPriority progress:nil completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
////        headImageView.image = image;
//        [headImageView performSelector:@selector(setImage:) withObject:image afterDelay:1 inModes:@[NSDefaultRunLoopMode]];
//    }];
}

/**
 *  调整到用户空间
 *
 *  @param userId 用户id
 */
+ (void)toUserSpace:(NSString *)userId
{
    if (userId == nil) {
        return;
    }
    if ([userId isKindOfClass:[NSNumber class]]) {
        userId = [(NSNumber *)userId stringValue];
    }
    //判断是不是当前用户
    NSString *currentUserId = [[MMAppDelegateHelper shareHelper] currentUserId];
    if ([currentUserId integerValue] == [userId integerValue]) {
        [UIViewController triggerRoute:OPEN_MYPERSON_CENTER_PAGE withParameters:nil];
        return;
    }
    //end
    
    [UIViewController triggerRoute:OPEN_HECENTER_PAGE withParameters:@{@"userId":userId}];
}

#pragma mark - private method

- (void)taped
{
    if (self.userId == nil || [self.userId integerValue] == 0) {
        return;
    }
    
    //如果是匿名用户，则不处理点击事件
    if (self.isAnonymous) {
        return;
    }
    //end
    
    //判断有没有委托代理
    if (self.c_delegate && [self.c_delegate respondsToSelector:@selector(headImgeViewTaped:)]) {
        [self.c_delegate headImgeViewTaped:self];
        return;
    }
    
    [YAHeadImageView toUserSpace:(NSString *)self.userId];
}

#pragma mark - getters and setters

- (void)setShadeImageName:(NSString *)shadeImageName
{
    if (_shadeImageName) {
        _shadeImageName = nil;
    }
    _shadeImageName = shadeImageName;
    shadeImageView.image = [UIImage imageNamed:shadeImageName];
}

- (void)setShadeHighlightedImageName:(NSString *)shadeHighlightedImageName
{
    if (_shadeHighlightedImageName) {
        _shadeHighlightedImageName = nil;
    }
    _shadeHighlightedImageName = shadeHighlightedImageName;
    shadeImageView.highlightedImage = [UIImage imageNamed:shadeHighlightedImageName];
}

- (void)setVerifiedTypeImage:(NSString *)verifiedTypeImage
{
    if (_verifiedTypeImage) {
        _verifiedTypeImage = nil;
    }
    _verifiedTypeImage = verifiedTypeImage;
    //判断要头像大小，选择合适的v图标
    verifiedTypeImageView.image = [UIImage imageNamed:verifiedTypeImage];
    //end
    //更新v的大小约束
    [verifiedTypeDimensionsSizeConstraint enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        [(NSLayoutConstraint *)obj setConstant:verifiedTypeImageView.image.size.height];
    }];
    //end
}

- (void)setYHighlighted:(BOOL)yHighlighted
{
    _yHighlighted = yHighlighted;
    shadeImageView.highlighted = yHighlighted;
}

- (BOOL)isYHighlighted
{
    return [shadeImageView isHighlighted];
}

- (void)setHidden:(BOOL)hidden
{
    [super setHidden:hidden];
    if (hidden) {
        shadeImageView.image = nil;
        headImageView.image = nil;
    }
}

- (void)setHideVerifiedView:(BOOL)hideVerifiedView
{
    _hideVerifiedView = hideVerifiedView;
    verifiedTypeImageView.hidden = hideVerifiedView;
}

@end
